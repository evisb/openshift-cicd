# --- Create necessary projects openshift-tasks-dev and openshift-tasks-prod:
- name: check existing projectsX
  shell: oc get projects | awk '{ print $1 }'
  register: projects
  changed_when: false

- name: Create openshift-tasks-dev project
  shell: "oc adm new-project openshift-tasks-dev --description='Openshift Tasks Development Environment'"
  when: mode=="create" and 'openshift-tasks-dev' not in projects.stdout_lines

- name: Reseting openshift-tasks-dev project to empty state
  shell: oc delete all --all -n openshift-tasks-dev
  when: "'openshift-tasks-dev' in projects.stdout_lines"

- name: Create openshift-tasks-prod project
  shell: "oc adm new-project openshift-tasks-prod --description='Openshift Tasks Production Environment'"
  when: mode=="create" and 'openshift-tasks-prod' not in projects.stdout_lines

- name: Reseting openshift-tasks-prod project to empty state
  shell: oc delete all --all -n openshift-tasks-prod
  when: "'openshift-tasks-prod' in projects.stdout_lines"

# --- Create Templates openshift-tasks-dev and openshift-tasks-prod in namespace openshift:
- name: check existing templates
  shell: oc get templates -n openshift | awk '{ print $1 }'
  register: templates
  changed_when: false

- block:
  - name: Prepare Openshift Tasks Dev Template
    template: src=tasks_template_dev.yml.j2 dest=/tmp/tasks_template_dev.yml

  - name: Create Openshift Tasks Dev Template in openshift namespace
    shell: "oc create -f /tmp/tasks_template_dev.yml -n openshift"
  when: "'tasks-dev' not in templates.stdout_lines"

# Do one sample deployment to ensure docker images and maven dependencies are downloaded:
- block:
  - name: Doing sample deployment of openshift-tasks-dev app
    shell: "oc new-app --template tasks-dev -n openshift-tasks-dev --labels=TasksDevInitialDeploymentTest=true"

  - name: get route for tasks app
    shell:  oc get route -n openshift-tasks-dev tasks | awk '/^tasks/ { print $2 }'
    changed_when: false
    failed_when: tasksroute.stdout==""
    register: tasksroute

  - name: Wait for tasks app dev to become online
    shell: curl "http://{{ tasksroute.stdout }}/"
    register: tstcurl
    changed_when: false
    until: "'<title>OpenShift Demo Tasks</title>' in tstcurl.stdout"
    retries: 100
    delay: 5

  - name: Removing sample deployment of tasks-dev app
    shell: "oc delete all -l TasksDevInitialDeploymentTest -n openshift-tasks-dev"
  when: mode=="reset" or 'tasks-dev' not in templates.stdout_lines

- block:
  - name: Prepare Openshift Tasks Prod Template
    template: src=tasks_template_prod.yml.j2 dest=/tmp/tasks_template_prod.yml

  - name: Create Openshift Tasks Prod Template in openshift namespace
    shell: "oc create -f /tmp/tasks_template_prod.yml -n openshift"

  - name: Grant Access to Images from openshift-tasks-dev
    shell: "oc policy add-role-to-group system:image-puller system:serviceaccounts:openshift-tasks-prod -n openshift-tasks-dev"
  when: "'tasks-prod' not in templates.stdout_lines"


# Create git hook for openshift-tasks app inside gogs pod:
- block:
  - name: get git pod id
    shell: oc get pods -n devops-tools | grep gogs-1 | awk '{ print $1 }'
    register: gitPod
    changed_when: false

  - file: path=/tmp/hooks state=directory

  - template: src=post-receive.j2 dest=/tmp/hooks/post-receive mode=a+x

  - name: Create git hook for openshift tasks app
    shell: "oc rsync /tmp/hooks/ {{ gitPod.stdout }}:/opt/gogs/data/repositories/sddc/openshift-tasks.git/hooks  -n devops-tools --strategy=tar"
  when: mode=="create" or mode=="reset"

# Create Build Pipeline in devops-tools namespace to promote tasks app from openshift-tasks-dev to openshift-tasks-prod
- name: Grant devops-tools Jenkins system-account access to openshift-tasks-dev
  shell: oc policy add-role-to-user edit system:serviceaccount:devops-tools:jenkins -n openshift-tasks-dev
- name: Grant devops-tools Jenkins system-account access to openshift-tasks-prod
  shell: oc policy add-role-to-user edit system:serviceaccount:devops-tools:jenkins -n openshift-tasks-prod
- name: Grant Jenkins system-account access to openshift-tasks-prod
  shell: oc policy add-role-to-user edit system:serviceaccount:openshift-tasks-dev:jenkins -n openshift-tasks-prod

- name: Prepare pipeline yaml
  template: src=tasks_pipeline_devops.yml.j2 dest=/tmp/tasks_pipeline_devops.yml
- name: Delete tasks pipeline in devops-tools project
  shell: "oc delete buildconfig openshift-tasks-pipeline -n devops-tools"
  ignore_errors: true
- name: Create tasks pipeline in devops-tools project
  shell: "oc create -f /tmp/tasks_pipeline_devops.yml -n devops-tools"
